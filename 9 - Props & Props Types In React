Understanding Props:

In React, you can create different components to represent different parts of your app. For example, you might create a component for a header, a component for a sidebar,
and a component for a main section.

Sometimes, you want to pass data from one component to another. That's where props come in!

Props (short for "properties") are a way to pass data from a parent component to a child component. The parent component can specify the data it wants to pass down as 
props when it renders the child component.

Example of how to use props In React:

Parent Component:

import React from 'react';
import ChildComponent from './ChildComponent';

function ParentComponent() {
  const message = 'Hello World';
  return (
    <div>
      <ChildComponent message={message} />
    </div>
  );
}

export default ParentComponent;


In this example, the ParentComponent passes the message variable to the ChildComponent as a prop with the name message.

import React from 'react';

function ChildComponent(props) {
  return (
    <div>
      <p>{props.message}</p>
    </div>
  );
}

export default ChildComponent;


In the ChildComponent, we receive the props parameter and use the message prop to render a paragraph element with the message.

So when ParentComponent renders, it will pass the message value to the ChildComponent through the message prop, and ChildComponent will render the message as
a paragraph element.


Let's now have a look at another example :

Let's create a custom component and create a heading but the content of the heading will be passed from another file :

Let's look at the Custom.js file :

import React from 'react'

export default function Heading(props){

    return(

    <h1>{props.title}</h1>

    )

}


Now inside the App.js we will pass the value :


import './App.css';

import Heading from './newcomponents/Custom';

function App(){
	return (
		<>
		< Heading title ="First Heading"/>
		</>
	);
}

export default App;






Prop Types In React 


What are Proptypes ?? 


PropTypes are simply a mechanism that ensures that the passed value is of the correct datatype.


Suppose we have two files one named as App.js :


import './App.css';

import Validation from './newcomponents/Custom';



function App(){
	return (
		<>
	  <Validation name ="Marley Malen"/>
	  <Validation age = "8"/>
	  <Validation qualification ="CBA"/>
		</>
	);
}

export default App;



Now we have a file named as Custom.js

import React from 'react';
import PropTypes from "prop-types";

export default function Validation(props) {
  return (
    <>
      <h1>{props.name}</h1>
      <h2>{props.age}</h2>
      <h3>{props.qualification}</h3>
    </>
  );
}

Validation.propTypes = {
  name: PropTypes.string,
  age: PropTypes.number,
  qualification: PropTypes.string,
};



Here we are making sure that name is a string , age will be a number and qualification will also be a number . 

But when we check in the console we find we get an error because in age we have passed "8" which is a string but should be a nnumber. 
